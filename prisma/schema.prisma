generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id              String           @id @default(uuid())
  name            String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userPermissions userPermission[]
}

model Roles {
  id        String      @id @default(uuid())
  name      String      @unique
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  userRoles userRoles[]
}

model userRoles {
  id        String   @id @default(uuid())
  rolesId   String?
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roles     Roles?   @relation(fields: [rolesId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model userPermission {
  id           String      @id @default(uuid())
  permissionId String?
  userId       String
  updatedAt    DateTime    @updatedAt
  createdAt    DateTime    @default(now())
  permission   Permission? @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  CartItem  CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  CartId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  quantity  Int
  Cart      Cart     @relation(fields: [CartId], references: [id], onDelete: Cascade)
  products  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Address {
  id          String   @id @default(uuid())
  userId      String
  province    String   @db.VarChar(100)
  city        String   @db.VarChar(100)
  subdistrict String   @db.VarChar(100)
  village     String   @db.VarChar(100)
  postalCode  Int
  address     String   @db.VarChar(255)
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Order       Order[]
}

model Discount {
  id           String       @id @default(uuid())
  name         String
  status       Boolean
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  discountType discountType
  endDate      DateTime
  startDate    DateTime
  Product      Product[]
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  review    String
  createdAt DateTime @default(now())
  productId String
  userId    String
  products  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Payment {
  id              String   @id @default(uuid())
  orderId         String   @unique
  paymentMethod   String
  status          String
  amount          Decimal
  transactionCode String?
  transactionId   String   @unique
  expiryDate      String
  paymentDate     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  status     String
  totalPrice Decimal
  addressId  String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Address    Address     @relation(fields: [addressId], references: [id])
  OrderItem  OrderItem[]
  payment    Payment?
  Shipment   Shipment?
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
  id          String      @id @default(uuid())
  name        String      @unique @db.VarChar(100)
  description String?     @db.VarChar(255)
  price       Decimal
  stock       Int         @default(0)
  rate        Int?        @default(0)
  views       Int?
  status      Boolean?    @default(false)
  slug        String
  tags        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  categoryId  String?
  discountId  String?
  imageUrl    String?
  CartItem    CartItem[]
  OrderItem   OrderItem[]
  Category    Category?   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Discount    Discount?   @relation(fields: [discountId], references: [id], onDelete: Cascade)
  review      Review[]
}

model Shipment {
  id             String   @id @default(uuid())
  orderId        String   @unique
  courier        String
  service        String
  cost           Float
  estimated      String
  description    String?
  status         String
  trackingNumber String?  @default(uuid())
  updatedAt      DateTime @updatedAt
  createdAt      DateTime @default(now())
  Order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model User {
  id              String           @id @default(uuid())
  username        String           @unique @db.VarChar(50)
  email           String?          @unique @db.VarChar(255)
  password        String           @db.VarChar(255)
  fullName        String           @db.VarChar(255)
  imageUrl        String?
  phoneNumber     String?          @unique
  regionId        String?
  isActive        Boolean          @default(true)
  updatedAt       DateTime         @updatedAt
  createdAt       DateTime         @default(now())
  gender          genderType?
  address         Address[]
  Cart            Cart?
  Order           Order[]
  Review          Review[]
  UserToken       UserToken[]
  userPermissions userPermission[]
  userRoles       userRoles?
}

model UserToken {
  id           String   @id @default(uuid())
  userId       String
  refreshToken String   @unique
  browserInfo  String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum discountType {
  PRECENTAGE
  FIX
}

enum genderType {
  MAN
  WOMAN
  OTHER
}
